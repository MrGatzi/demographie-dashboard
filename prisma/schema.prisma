generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// @@allow('all', true)
model Party {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  shortName   String   @unique
  color       String?  // CSS color for UI
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  members ParliamentMember[]

  @@map("parties")
}

/// @@allow('all', true)
model State {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  shortCode   String   @unique // e.g., "O" for Ober√∂sterreich
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  members ParliamentMember[]

  @@map("states")
}

/// @@allow('all', true)
model ElectoralDistrict {
  id          Int      @id @default(autoincrement())
  code        String   @unique // e.g., "4D"
  name        String   // e.g., "Traunviertel"
  fullName    String   // e.g., "4D Traunviertel"
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  members ParliamentMember[]

  @@map("electoral_districts")
}

/// @@allow('all', true)
model ParliamentMember {
  id                String   @id // This will be the parliament profile ID
  fullName          String   // e.g., "Auer Katrin, Mag."
  firstName         String?
  lastName          String
  title             String?  // e.g., "Mag.", "Dr.", etc.
  profileUrl        String?
  profileImageUrl   String?  // Store the full URL to the profile image
  detailedInfo      String?
  isActive          Boolean  @default(true)
  fetchedAt         DateTime @db.Timestamptz(6)
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @db.Timestamptz(6)

  // Additional fields for detailed member data
  birthDate         DateTime? @db.Date
  birthPlace        String?
  occupation        String?
  careerHistory     Json?
  education         Json?
  politicalFunctions Json?
  committees        Json?
  socialMedia       Json?
  detailedDataFetchedAt DateTime? @db.Timestamptz(6)

  // Foreign keys
  partyId           Int
  stateId           Int
  electoralDistrictId Int

  // Relations
  party             Party             @relation(fields: [partyId], references: [id], onDelete: Cascade)
  state             State             @relation(fields: [stateId], references: [id], onDelete: Cascade)
  electoralDistrict ElectoralDistrict @relation(fields: [electoralDistrictId], references: [id], onDelete: Cascade)

  @@unique([fullName, partyId, electoralDistrictId, fetchedAt])
  @@index([partyId])
  @@index([stateId])
  @@index([electoralDistrictId])
  @@index([isActive])
  @@index([fetchedAt])
  @@index([detailedDataFetchedAt])
  @@map("parliament_members")
}

/// @@allow('all', true)
model DataImportSession {
  id          Int      @id @default(autoincrement())
  sessionId   String   @unique
  totalRecords Int
  importedRecords Int
  status      String   // "pending", "processing", "completed", "failed"
  startedAt   DateTime @db.Timestamptz(6)
  completedAt DateTime? @db.Timestamptz(6)
  error       String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)

  @@index([status])
  @@index([startedAt])
  @@map("data_import_sessions")
}

// Enable Row Level Security and create policies
/// This SQL runs after the migrations
/// ```sql
/// -- Enable RLS
/// ALTER TABLE parties ENABLE ROW LEVEL SECURITY;
/// ALTER TABLE states ENABLE ROW LEVEL SECURITY;
/// ALTER TABLE electoral_districts ENABLE ROW LEVEL SECURITY;
/// ALTER TABLE parliament_members ENABLE ROW LEVEL SECURITY;
/// ALTER TABLE data_import_sessions ENABLE ROW LEVEL SECURITY;
/// 
/// -- Create policies for public read access
/// CREATE POLICY "Enable read access for all users" ON parties FOR SELECT USING (true);
/// CREATE POLICY "Enable read access for all users" ON states FOR SELECT USING (true);
/// CREATE POLICY "Enable read access for all users" ON electoral_districts FOR SELECT USING (true);
/// CREATE POLICY "Enable read access for all users" ON parliament_members FOR SELECT USING (true);
/// CREATE POLICY "Enable read access for all users" ON data_import_sessions FOR SELECT USING (true);
/// 
/// -- Grant usage on schema and tables
/// GRANT USAGE ON SCHEMA public TO anon, authenticated;
/// GRANT SELECT ON ALL TABLES IN SCHEMA public TO anon, authenticated;
/// ```
